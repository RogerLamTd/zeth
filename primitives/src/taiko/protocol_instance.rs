use alloy_primitives::{Address, B256, U256};
use alloy_sol_types::{sol, SolEvent, SolValue, TopicList};
use anyhow::{anyhow, Context, Result};
use ethers_core::types::{Log, H256};
use once_cell::sync::Lazy;
use serde::{Deserialize, Serialize};

use crate::{ethers::from_ethers_h256, keccak, taiko::consts::testnet};

sol! {
    #[derive(Debug, Default, Deserialize, Serialize)]
    struct EthDeposit {
        address recipient;
        uint96 amount;
        uint64 id;
    }

    #[derive(Debug, Default, Deserialize, Serialize)]
    struct BlockMetadata {
        bytes32 l1Hash; // slot 1
        bytes32 difficulty; // slot 2
        bytes32 blobHash; //or txListHash (if Blob not yet supported), // slot 3
        bytes32 extraData; // slot 4
        bytes32 depositsHash; // slot 5
        address coinbase; // L2 coinbase, // slot 6
        uint64 id;
        uint32 gasLimit;
        uint64 timestamp; // slot 7
        uint64 l1Height;
        uint24 txListByteOffset;
        uint24 txListByteSize;
        uint16 minTier;
        bool blobUsed;
        bytes32 parentMetaHash; // slot 8
    }

    #[derive(Debug)]
    struct Transition {
        bytes32 parentHash;
        bytes32 blockHash;
        bytes32 signalRoot;
        bytes32 graffiti;
    }

    #[derive(Debug, Default, Clone, Deserialize, Serialize)]
    event BlockProposed(
        uint256 indexed blockId,
        address indexed prover,
        uint96 livenessBond,
        BlockMetadata meta,
        EthDeposit[] depositsProcessed
    );

    #[derive(Debug)]
    struct TierProof {
        uint16 tier;
        bytes data;
    }

    function proveBlock(uint64 blockId, bytes calldata input) {}
}

// require equal with the assembled protocol instance and the block proposed event
pub fn assert_pi_and_bp(pi: &ProtocolInstance, bp: &BlockProposed) -> Result<()> {
    if pi.block_metadata.abi_encode() != bp.meta.abi_encode() {
        return Err(anyhow!(
            "block metadata mismatch, expected: {:?}, got: {:?}",
            bp.meta,
            pi.block_metadata
        ));
    }
    Ok(())
}

pub fn filter_propose_block_event(
    logs: &[Log],
    block_id: U256,
) -> Result<Option<(H256, BlockProposed)>> {
    for log in logs {
        if log.topics.len() != <<BlockProposed as SolEvent>::TopicList as TopicList>::COUNT {
            continue;
        }
        if from_ethers_h256(log.topics[0]) != BlockProposed::SIGNATURE_HASH {
            continue;
        }
        let topics = log.topics.iter().map(|topic| from_ethers_h256(*topic));
        let result = BlockProposed::decode_log(topics, &log.data, false);
        let block_proposed = result.with_context(|| "decode log failed")?;
        if block_proposed.blockId == block_id {
            return Ok(log.transaction_hash.map(|h| (h, block_proposed)));
        }
    }
    Ok(None)
}

#[derive(Debug)]
pub enum EvidenceType {
    Sgx {
        new_pubkey: Address, // the evidence signature public key
    },
    PseZk,
}

#[derive(Debug)]
pub struct ProtocolInstance {
    pub transition: Transition,
    pub block_metadata: BlockMetadata,
    pub prover: Address,
}

impl ProtocolInstance {
    pub fn meta_hash(&self) -> B256 {
        keccak::keccak(self.block_metadata.abi_encode()).into()
    }

    // keccak256(abi.encode("VERIFY_PROOF", ITaikoL1(taikoL1).getConfig.chainId,
    // address(this), tran, newInstance, prover, metaHash))
    pub fn hash(&self, evidence_type: EvidenceType) -> B256 {
        match evidence_type {
            EvidenceType::Sgx { new_pubkey } => keccak::keccak(
                (
                    String::from("VERIFY_PROOF"),
                    testnet::CHAIN_ID,
                    Lazy::<alloy_primitives::Address>::get(&testnet::L1_SGX_VERIFIER).unwrap(),
                    self.transition.clone(),
                    new_pubkey,
                    self.prover,
                    self.meta_hash(),
                )
                    .abi_encode(),
            )
            .into(),
            EvidenceType::PseZk => todo!(),
        }
    }
}

pub fn deposits_hash(deposits: &[EthDeposit]) -> B256 {
    keccak::keccak(deposits.abi_encode()).into()
}

#[cfg(test)]
mod tests {
    use alloy_sol_types::SolCall;

    use super::*;
    #[test]
    fn test_prove_block_call() {
        let input = "0x10d008bd0000000000000000000000000000000000000000000000000000000000000dde00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001520ae895e6a3433ccd2376cc3e5c8e0322e06ee6b9217e6f425c396f65f107d5a77022e3849ff0f1543490a2cefc8532d7b7b2ea1b9915d2e02eb358124d6c8d746022e3849ff0f1543490a2cefc8532d7b7b2ea1b9915d2e02eb358124d43b5cce302e31382e302d64657600000000000000000000000000000000000000000000569e75fc77c1a856f6daaf9e69d8a9566ca34aa47f9133711ce065a571af0cfd0000000000000000000000003c44cdddb6a900fa2b585dd299e03d12fa4293bc0000000000000000000000000000000000000000000000000000000000000dde0000000000000000000000000000000000000000000000000000000000e4e1c000000000000000000000000000000000000000000000000000000000657fe4b70000000000000000000000000000000000000000000000000000000000001b3d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000476000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000000008c00b6905368def45ccddf491cb43ba2e435d75ba15e3b8fe5d2b95e3501de7cc06da8ec383ebc353dc98758c163c0445309ec0aa5b8301ccc90190863075a6b5bb9f5f54b41bab7fdc7e838772417c22c6520c5df87c6c274d6e9c37114de35cfeb69aedff62e72f50d0b09ee4672b1d83bb7bc4ea22a028417518dbf7599790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000001900000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000123900000000c13bd882edb37ffbabc9f9e34a0d9789633b850fe092bfcc0dcb8fe13204acd685d0c903e10876d4bc3ed3bebb4c969a820b742a0a3cc2e063f446964e725694210b9625a7c1aa7054223085650075dcbe232c671b00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000011a0000000000000000000000000000000000000000000000000000000000000112000000000000000000000000000000000015de480f002f2e5740f0dcc50b21b900000000000000000000000000000000017de5935d9c18e4ded5175cfb52b157200000000000000000000000000000000000000000000000eb4119c59d32ee00e0000000000000000000000000000000000000000000000070ce003b4a34d0b650000000000000000000000000000000000000000000000021e8b152cf70337b80000000000000000000000000000000000000000000000000002fde76d3f51f800000000000000000000000000000000000000000000000e23381c2abb532941000000000000000000000000000000000000000000000004a009049b49a5c45000000000000000000000000000000000000000000000000fe6293fb97672327400000000000000000000000000000000000000000000000000022294630dd6e700000000000000000000000000000000000000000000000c2507a25a60e2792100000000000000000000000000000000000000000000000d46a828c5377156cb000000000000000000000000000000000000000000000008c756363f92746daf0000000000000000000000000000000000000000000000000001dbd739a7c7ba000000000000000000000000000000000000000000000005e8a25b1458ad038a000000000000000000000000000000000000000000000000ae17145c18d93f31000000000000000000000000000000000000000000000006189e2563e91605170000000000000000000000000000000000000000000000000000ffbb894e8afd29e096a7e557a12ffa5d5c90792520f182db31fa2426a9f4d625f363e7a24b532f144190a462cc19fc8bb4f69fc0e3049752da1717cf5023d541f87cb570084c2d1ae6ef5035e9c6eb75ec266755a9b4fe0991be5689c057926631de0649e3b40bcc50ee72c7f55bff55a2bde0285034bac5110262c115020f3f1ac1a2862c770a1db045f5f52d46f4d0d27e7479845501c6bf03a39dac3a3ef0d50edf20c3810ef712b8a4ad7e1e9c0bc9c265eba279bbbfbaf1a277c28fc14a476ab2735ab805cea8ccc6d7e55d2d8d8bfd1a1a536eb52a1e271743b6dd20413d6d1f980ad3163775e27493b64c9f288308feb6ce85a94912e5ac8e8fc675690bd06f2e364b00c7399d7748c7487b3a984361826655a45c05d38014fe226cf36dec781eb9cf1e0ca51052021c23a93561ea92f934210d39ae3a4dc749bc29ee0173e65b616026a4f3435b3cb478197105c839f6654f6eb2dbd02f0d5c47e70d3c9c8b4c84630cfaa6e27a815797eb17e04a6e14b5607268391de6cf9c114d811f7ed0fd65352ec2d1cb8d18952b390d17ca78f41355980b75fd44b3573a50ec73f826d7a0552e59bc4f3b10927981cbe01c877e86bce8a4c07b6a7fdd4f8ed5d3c4346e275413ed50e35b872659ba43bb9cc75631205fbcb018227febda17107544f06a2aad181d6a00593b5898e0a76940388f253e0886e311394051d899f13b4190698e2c1ea71dba3f6e932af1526337820b79ddbbeaa672acccdb2519f072222f5fa8461bb50252720e3d6f130e93bc801294b9259db612cadbb7915ea0653190f4bba724752c3e6d12db407ef7538d740517afd098afc285debe23ab4bbd3f125543382391dbd465633b338193eede7acb36080a3c2ab7dcdb123997f37bc2986e4a481381dbc4aa14f5795f1a64b11c48ade7089328269a73daf2b474a26802c1a6740a49ddb02d7a6558186055bd0ce82eb363de8c081b0a468d5f7ebb03848fc18b184fd912633ae26fadac67d02b3536ccd850a4865bf081820bcc2b7936269ac91cbdcc18ea5882bf18c17551d1a981406ea72eaa521a26a92706637fcd2c16e61d20dbbf9bdb50ae1e4ec00eb3300e96b0f8e0ce9bb5a5c432861e2ba421456a2e3c6ff87a6ce3a3f8d9f2c27a71c7e40e588969305ae3991c8d00b5b186234317f7631ae9486e057196d240b6f75564337030ed8a0d29b33131c994e40eeec408277e7591f3f6d6af13852f764ec1dc0f1d4356f260b29a9278dc3f7a86a68c166d95154adf425c954827480168a91e4f7ddf1d5b75c698a40746506995dda30626255c9e9d43c23004259de7c4b5251d25651e8c55aad4fb857b917910a69211074896979f6723c8bb5086a303e94b3a25a763e973b32e2fad09eb23949b03172dd8b02e1927ff03883103d1c4819a9ace36916f637455f5f2c840693dc4370fd03233ceaab5131bf7c8c3c18ab63215aa7f177d3ed7192ac9e3af2dc0f97b161a9aa45fc4a92e352465e2f241630bcfdf768be7e8e81cb6656594528472941739343ec5adb59d4f8c856e724f2d51d5789739576666ba23f1122213a703271da5ca8e0c9edb5a25e9797c55fb244676ad5bfc244c65099dc0c1f30d2ce51f21eb4708ed5a8fb668331a79e1302de46ad8c345c10a86bdcb9b3b6f226f920e203adef5a0bb98c3856a01ee17a741bddd9b8dbb44dd92ceef80c6c62f5a184511e1696f501447d3b161004f7f26a87d48c47c72b6456d27ae7a1919cb460af32a82cd3604f51bd54504824a05feee799b621f18b73b53b118aeaf131d29a8d908b87831871d4c94826459d9cb6b463883a70925c702ba77e69450d0909fd76125d19e4e3ad8db7ec2e538f8f827b05cb314bf5736890e9d5672199e1f26c61505c4fb973fd087b491a1b65f1825073cf3788d9d69e73fcda65342821f0abe4e1c8081c0478624344086ba501a8e04b1473cf9966797344b20984cc126338b230b0cf876f6c0c9d187ad93f4ac92ea04ad8c66c4db7e7cc0eaa2b8f483696d2313c5deb63345e029f2e3c4f5b352f8850e0b52ca0a3ce5e71a9bab7748c6b1ee1732042497cb309ff651958a9668e8e9b84efcdc6671fb369bfeb2d50c72e93c19f38c741e1c5e4c5b1bea0ba7915ecdd46f63766c4e30722c737e89354c4d892fe9aa910be4a25a93976ec13c78387d16f2a6dfd69c5f724948a871c630e06618169652459225042fa8c3966aa0b72d07ec1081ba872d44dbbb5c7bee3f070825f86321897cf53db57a85fffdf138d188dd9ef0f985e74dfbcf6cc3075fd0000689ae45a53d2851f759b18e2d7aec7bdc18500edcf3a98f16efb856cc3295011d95919b7a062bb9a7046e4ac4a0c1cddbea3d850ac8a7d98cb8fc39689f87680df37173eedba9935ee5fa3250d185942988db232792f3f4dc6e1aaf4045ac4f258282c85c9f02d0e1f9d51d2ad0ef3eff3f00d9223c36c89316bcef09c84abf1d219e899df526e0b08b41c26cacdc9185c43896572d318675b96f68ec3ea753236af2068dd218923d5f0bf07d941d85bc6103bf81cc563c41e1ac0c4afd53e01b08f66e9cc3f27b8827ff31cf1f9de9711f503af9200fa39ccba7eac36c753d2e7f71c7c7af6cd189ec5be50f46925542970cc7754e606dec97956a4687c89c23b053e39a99b40570911e17bdfda81de4af733c2b189fe75b74be225da417d613af4632e36ef93ebe1136e12723ff443c972550bc2be2494f0926a8dd957e8c2cd842b7cfad29c42b433c89d425fa481ee8ab49e1828af61bbf6c72a7f0d188245d01051162b0becbe046c03ba281957962c3bba9cf027ea6ee7b120b7edcdb1f1d13695122b2fac08e1493799b0ee0d4d240bd02af1f416a87ba77b59d698706a0eabbd1caed596e576e05f11f7b56f295b3aa24e2d29becd869ac1509161a028b9a8294d20cf3d934fdceb614bea7c2a0c975b438d179e4e999eec2efb4fc0723a5fc8e394a961eb195c03cd2032d830de7fc0687e233149e02e744250f94206ba1bb96a9c1a09a16960806e1b57273acea244a33c373446ae164f5c1f0250ef1488b62be1943afd29721569a7d9e84570ad3561cadac43f5e5601bd1b909045906b788f3e5a65b2b258eaa71ab8555893773e0e5430ceb3e9410aecc3d432900e399454708f093f249a61ab60b82dba3b37f4bd46a47a0bb4c0ce81d847e1449ef54dc055b891d71427e470ce64e93b8c8e2ab0523fd049faa933588b6ff026f5ac681b72627e25eba30e37714e732c7a43822f550a3a4f12ee0a13cedf11e5005aaf6930c928a3b664b47b8c9d9bedf157b009fbf6789f012acc316a60321ec9833e839f47bc06532dff617e86efc9b173c16f02d2b1cdf663a4fb92ed0037f3573c6f83bdbc321cbd98f20a6034e20c7b2a3cb87b0ed6a85f3fd8c3d732d5ff3b311865a590c2b9472f32d9b005ac77652933460de42f037b8b0eff666203d42c2af27656ff45e6956d6f6ff88fed6cf303a968b53bf3ab1ba3f07e61b2a1362b36b689be600aabe6cc38627648831c10ae9a32c672610328a5037837402c133efe8454bd2852def0642cd449ec97b6a7b7cbd3f61278e34076ff28d012ba11c0a429301337ea80746d5b7efb0b28c89b0e0f85bb1b4deab54038eb7db21dfd0a12521e6696b64567b1e3cf6d288e5a414b8e7d40d3153d31deb63e37c1d8ce797a1a046ff6c9a07c06efecd12cb89cb106b1171bc1970cd3d39cf778116196c1d8b554e95006475cc0f82b39859043672ac2b691d504e24f0c40848dd0e48fc6a9a9def5d6551daa6a87cadc91f6948d97ea1121abed472c48baffdac04799284ff24ffea5c7de0e27e9b72624ced2903fe6b2ff0aac3a95fe07eddda1f1fcaed3806817756b976dc00a766946db414460cea4191f7903125c15efeb4010e1c3078621f9608b9e4d3fc3dd6e64acf83fe9f4d88230ce3dbda6e4a04ac13835a3a66b5ecb33288ff6fbe9ca3a3ab7dab53031864deeab202098d52ab6a1438b08d702864fa292eaa1c994ec7ba66fc35211a9baa9bf409c9c4d7710b2c0fa83dbda08166f10282dd71c4040bd13f43db46955fe6b52c9ac2d047be497a0791734838f15e788ec582f0732dc5d368c308843e1ad2fa2fb45a353151c81e1aeedc8020574b360e906808594636123b087e981f75a6cc4f86bc1f68b4ebc42a001a744f7f498c9918319b299e1c13cc3973533e7b1610872573aa31f9aa55143b30806fa2d4dd323f333aa984b07d110992016683500d69360615b164579407152e035dc0dbc12f067ec313327c3254085d22e9e993683c7a8590d7be79cc26e568e5972a6c0ec1f419ad2de74cee5f76ed7158352d6884847e56884089192f97e1076cb94f4135a23caafb91a0f3d2e5b40f5893cdc6cf4b3b6f40246ccf2860c1c38fda15716aec5d31de3144846c541efbda6d24d9c91215e00984839e2bc06e5203f4737005ade0f0286d97bfb293b3f3a79aa8680d192c8da9428d8413160030d59998da92acbacefd5fb654eed0d400e928bd2284721d0329ed673f1064502ef4dcf4d2fac9167de531bcd6f6dae5740081e50bdd247b7f3b659ee505338fc87a8f419f127b170606f298ddfc904319d8a9f6a0f926d11b8d3601121849fbfbbba3ae75beb3a12ccd46e79b2c96a4e34c9a4c67274dd820525f573d09676ad06b834dc63dd707bb9b278a01763e8cb66fd19f380d3bfd91e2e6f2000183c02b68db5dbf66f2f87b56fbb4e468d48340a99566a26cbbe0115791261100ad1f2d53b034f40c8c73cf78513251329f3cac8980b0ba8358b5b49a6b9e8f20d302554848fa29bf972065afbc4b579563baa050a5aeda1ced72b5198996e62fcb0c970e8197bb16848d7429053d4774d4d5cae1db2ae412c2ff57afa88c840fa077a49627c295caa2583fe60d17e374779733dad873f69c21827774afedd72677d67048dfb1904ea4dded021adf47b67428adf213cfc196aaa174c90a87df22f16b715e7b3e8d07f33d45160086c38b0c62d3f4654513336b22b5fdd84573272143fd75b9feaf24e68b131eb880dea31f231c9817ec0b34d5a9a5cbca7168219a10dea3579cbc0ca6808ad2afaa3e60c5b3a7f2ea004afedaf464e30a6697238b3284aad3ac6df6368d0d975f8e6914900b9b7aa1aeac40a289d731a406a502d9e62b9d8caf4eab1971c541cde8c63007adad95fcdab6c4c5ea2fe63040a80ec730cac911e10c1aa7f817afecda3c73b01a0d7ed1f7c1483e6f71ee22c49d0f2eb4b8626b1bfe2f8b92b7b3a4e5f530ecb5b090e748517f9f2206d267eab205add1aa9a52c58f03b187f07a4ed050cc07bdb64de1f96343a9a4599dda34eb000000000000000000000000000000000000000000000000000000000000000000000000000000";

        let input_data = hex::decode(&input[2..]).unwrap();
        let proveBlockCall { blockId, input } =
            proveBlockCall::abi_decode(&input_data, false).unwrap();
        println!("blockId: {}", blockId);
        let (meta, trans, proof) =
            <(BlockMetadata, Transition, TierProof)>::abi_decode_params(&input, false).unwrap();
        println!("meta: {:?}", meta);
        let meta_hash: B256 = keccak::keccak(meta.abi_encode()).into();
        println!("meta_hash: {:?}", meta_hash);
        println!("trans: {:?}", trans);
        println!("proof: {:?}", proof.tier);
        println!("proof: {:?}", hex::encode(proof.data));
    }
}
